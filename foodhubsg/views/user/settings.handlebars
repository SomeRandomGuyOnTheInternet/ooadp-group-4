{{> _msg }}
<div id="colorlib-container">
    <div class="container">
        <div class="col-md-12">
            <div class="box1">
                <div class="row row-pb-md">
                    <div class="col-md-12">

                        <header>
                            <h1 class="font_color"><b>User Settings</b></h1>
                            <h5>({{user.email}})</h5>
                            <hr>
                        </header>

                        <form method="post">

                            <div class="row form-group">
                                <div class="col-md-6">
                                    <label>Name</label>
                                    <input name="name" id="name" type="text" class="form-control"
                                        value="" placeholder="{{user.name}}" style="margin-bottom: 1em;">
                                </div>

                                <div class="col-md-3">
                                    <label>Height (m)</label>
                                    <input name="height" id="height" type="number" step="0.01" class="form-control"
                                        value="" placeholder="{{user.height}} m">
                                </div>

                                <div class="col-md-3">
                                    <label>Weight (kg)</label>
                                    <input name="weight" id="weight" type="number" step="0.01" class="form-control"
                                        value="" placeholder="{{user.weight}} kg">
                                </div>

                                {{#if user.password}}
                                    <div class="col-md-12 new-password">
                                        <label>Password</label>
                                        <input name="password" id="password" type="password" class="form-control delprefix"
                                            placeholder="(unchanged)">
                                    </div>
                                {{/if}}
                            </div>
                            <br>
                            <input type="submit" name="action" value="Update Settings" class="btn btn-primary"
                                style="background-color: #4CAF50;">
                            <input type="submit" name="action" value="Delete Account" onclick="remove_confirm()"
                                class="btn btn-primary" id="remove-account" style="background-color: #d9534f;">
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="box1">
            <div class="row row-pb-md">
                <div class="col-md-12">

                    <header>
                        <h1 class="font_color"><b>Referral Codes</b></h1>
                        <h5>Your Code: {{user.refCode}}</h5>
                        <hr>
                    </header>

                    <form method="post" action="/user/addRefCode">

                        <div class="row form-group">
                            <div class="col-md-12">
                                <label>Add Referral Code</label>
                                <input name="refCode" id="refCode" type="text" class="form-control"
                                    value="" placeholder="Eg: a00001">
                            </div>
                        </div>

                        <br>
                        <input type="submit" name="action" value="Add Referral Code" class="btn btn-primary"
                            style="background-color: #4CAF50;">
                    </form>
                </div>
            </div>
        </div>

        <div class="box1">
            <div class="row row-pb-md">
                <div class="col-md-12">

                    <header>
                        <h1 class="font_color"><b>Friend Activity</b></h1>
                        <hr>
                    </header>

                    {{#each referredUsers}}
                    <div class="row form-group">
                        <div class="col-md-12">
                            <a href="/user/userPage/{{ 'User.id' }}"><h5 style="margin-bottom: 20px;"><b>{{ 'User.name' }}</b>&nbsp;(Code: {{ 'User.refCode' }})</h5> </a>
                            <b>{{ 'User.height' }}</b> m
                            <b>{{ 'User.weight' }}</b> kg
                            <canvas id="foodHistoryChart{{@index}}" width="400" height="180"></canvas>
                        </div>
                    </div>
                    <hr>
                    {{else}}
                    <h4><b>You have not referred any one yet!</b></h4>
                    {{/each}}
                </div>
            </div>
        </div>


    </div>
</div>

{{#each referredUsers}}
{{#ifCond user.daysActive '>=' 3}}
    <script>
        var foodHistoryChart = document.getElementById('foodHistoryChart{{{@index}}}');
        var foodItems = {{{ json groupedFoodItems }}}, dailyAverageCalories = {{{ user.averageCalories }}};
        var labels = [], data = [], dailyData = [], breakfastData = [], lunchData = [], dinnerData = [], snacksData = [];
        var red = '#E82020', green = '#4CAF50', grey = '#333333'

        for (var [key] of Object.entries(foodItems)) {
            labels.push(key);
            data.push(parseInt(foodItems[key].dailyCalories));
            dailyData.push(parseInt(foodItems[key].dailyCalories));
            breakfastData.push(parseInt(foodItems[key].breakfastCalories));
            lunchData.push(parseInt(foodItems[key].lunchCalories));
            dinnerData.push(parseInt(foodItems[key].dinnerCalories));
            snacksData.push(parseInt(foodItems[key].snacksCalories));
        }

        var myFoodHistoryChart = new Chart(foodHistoryChart, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    label: 'Calories (kcal)',
                    backgroundColor: [
                        'rgba(255, 99, 132, 0)',
                    ],
                    borderColor: [
                        '#bababa',
                    ],
                    borderWidth: 2,
                    fill: false,
                }]
            },
            options: {
                responsive: true,
                title: { display: false },
                scales: {
                    yAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Calories (kcal)'
                        },
                        ticks: {
                            beginAtZero: true
                        }
                    }],
                    xAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Dates'
                        }
                    }],
                },
                annotation: {
                    annotations: [{
                        id: 'ideal-calories-line',
                        type: 'line',
                        mode: 'horizontal',
                        scaleID: 'y-axis-0',
                        value: 1500,
                        borderColor: green,
                        borderWidth: 1,
                        label: {
                            enabled: true,
                            content: 'Ideal Calorie Intake',
                            backgroundColor: 'white',
                            fontColor: green,
                        }
                    }, {
                        id: 'average-calories-line',
                        type: 'line',
                        mode: 'horizontal',
                        scaleID: 'y-axis-0',
                        value: dailyAverageCalories,
                        borderColor: red,
                        borderWidth: 1,
                        label: {
                            enabled: true,
                            content: 'Your Average Calorie Intake',
                            backgroundColor: 'white',
                            fontColor: red,
                        }
                    }]
                },
            },
            plugins: [{
                beforeDraw: function (c) {
                    var data = c.data.datasets[0].data;
                    for (let i in data) {
                        let line = c.data.datasets[0]._meta['0'].data[i]._model;
                        if (data[i] < c.annotation.elements['ideal-calories-line'].options.value) {
                            line.backgroundColor = green;
                            line.borderColor = green;
                        } else {
                            line.backgroundColor = red;
                            line.borderColor = red;
                        }
                    }
                }
            }],
        });

        $('#selectCalorieFilter').change(function () {
            var sel = $(this).val();
            var foodHistoryData = myFoodHistoryChart.config.data.datasets[0].data;
            var idealCaloriesValue = 0, averageCaloriesValue = 0;
            var newData = [];

            switch (sel) {
                case 'Daily':
                    newData = dailyData;
                    idealCaloriesValue = 1500;
                    averageCaloriesValue = {{{ user.averageCalories }}};
                    break;
                case 'Breakfast':
                    newData = breakfastData;
                    idealCaloriesValue = 500;
                    averageCaloriesValue = {{{ user.averageBreakfastCalories }}};
                    break;
                case 'Lunch':
                    newData = lunchData;
                    idealCaloriesValue = 400;
                    averageCaloriesValue = {{{ user.averageLunchCalories }}};
                    break;
                case 'Dinner':
                    newData = dinnerData;
                    idealCaloriesValue = 450;
                    averageCaloriesValue = {{{ user.averageDinnerCalories }}};
                    break;
                case 'Snacks':
                    newData = snacksData;
                    idealCaloriesValue = 150;
                    averageCaloriesValue = {{{ user.averageSnacksCalories }}};
                    break;
                default:
                    newData = dailyData;
                    idealCaloriesValue = 1500;
                    averageCaloriesValue = {{{ user.averageCalories }}};
                    break;
            }

            foodHistoryData.length = 0;
            foodHistoryData.push.apply(
                foodHistoryData, newData
            );

            myFoodHistoryChart.annotation.elements['ideal-calories-line'].options.value = idealCaloriesValue;
            myFoodHistoryChart.annotation.elements['average-calories-line'].options.value = averageCaloriesValue;

            myFoodHistoryChart.update();
        });
    </script>
{{/ifCond}}
{{/each}}