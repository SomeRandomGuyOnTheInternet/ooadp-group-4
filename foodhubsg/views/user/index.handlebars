{{> _msg }}
<div id="colorlib-container">
	<div class="container">
		{{#ifCond numOfDays '>=' 4}}
			<div class="row">
				<div class="col-md-12">
					<div class="box1">
						<div class="row row-pb-md">

							<div class="col-md-12">
								<div class="row">
									<div class="col-md-8">
										<h2 class="font_color"><b class="center_subtitle">Graph of Calorie Intake</b></h2>
									</div>
								
									<div class="col-md-4">
										<div class="input-group">
											<label>Calorie Intake Filter</label>
											&nbsp;&nbsp;&nbsp;&nbsp;
											<select class="custom-select form-control" id="selectCalorieFilter" name="selectCalorieFilter" style="top:-0.7em;">
												<option value="Daily" selected>Daily</option>
												<option value="Breakfast">Breakfast</option>
												<option value="Lunch">Lunch</option>
												<option value="Dinner">Dinner</option>
												<option value="Snacks">Snacks</option>
											</select>
										</div>
									</div>
								</div>
										
								<hr>
								<canvas id="foodHistoryChart" width="400" height="180"></canvas>
							</div>
							
						</div>
					</div>
				</div>
			</div>
		{{else}}
			<div class="box1">
				<div class="row row-pb-md">
					<div class="col-md-12">
						<div class="blog-entry">
							<div class="blog-img">
								<h3 class="font_color"><b class="center_subtitle">Summary of your food history</b></h3>
								<hr>
								<h4>You have not added enough food to generate a summary. Keep adding more food!</h4>
							</div>
						</div>
					</div>
				</div>
			</div>
		{{/ifCond}}

		<div class="box1">
			<div class="row row-pb-md">
				<div class="col-md-12">
					<h3 class="font_color"><b class="center_subtitle">Recommended food vendors near you</b></h3>
					<hr>
				</div>

				{{#if user.location}}
				<div class="col-md-12">
					<h4 id="current_location">Current Location: <b class="center_subtitle">{{user.location}}</b></h4>
				</div>

					{{#each shops}}
					<div class="col-md-6 recommended-shops">
						<div class="blog-entry">
							<div class="blog-img">
								<a class="action" href="/user/shops/{{this.id}}"><img src="{{this.imageLocation}}" class="img-responsive" alt="Image of shop"></a>
							</div>
							<div class="desc">
								<p class="meta">
									<b class="vendors"><b>{{this.name}}</b></b><br>
									<span class="food_location"><b>{{ this.address }}</b></span><br>
									<span class="food_rating">Rating: <b class="recommended-{{ this.isRecommended }}">{{ this.rating }}</b></span><br>
								</p>
							</div>
						</div>
					</div>
					{{else}}
					<div class="col-md-12">
						<h3 id="current_location"><b class="center_subtitle">There are no recommended shops near you</b></h4>
					</div>
					{{/each}}

				{{else}}
				<div class="col-md-12">
					<h4 id="current_location">We could not detect your current location</b></h4>
				</div>
				{{/if}}

			</div>
		</div> 

	</div>
</div>

{{#ifCond numOfDays '>=' 4}}
<script>
	var foodHistoryChart = document.getElementById('foodHistoryChart');
	var foodItems = {{{ json groupedFoodItems }}}, dailyAverageCalories = {{{ dailyAverageCalories }}};
	var labels = [], data = [], dailyData = [], breakfastData = [], lunchData = [], dinnerData = [], snacksData = [];
	var red = '#E82020', green = '#4CAF50', grey = '#333333'

	for (var [key] of Object.entries(foodItems)) {
		labels.push(key);
		data.push(parseInt(foodItems[key].dailyCalories));
		dailyData.push(parseInt(foodItems[key].dailyCalories));
		breakfastData.push(parseInt(foodItems[key].breakfastCalories));
		lunchData.push(parseInt(foodItems[key].lunchCalories));
		dinnerData.push(parseInt(foodItems[key].dinnerCalories));
		snacksData.push(parseInt(foodItems[key].snacksCalories));
	}

	var myFoodHistoryChart = new Chart(foodHistoryChart, {
		type: 'line',
		data: {
			labels: labels,
			datasets: [{
				data: data,
				label: 'Calories (kcal)',
				backgroundColor: [
					'rgba(255, 99, 132, 0)',
				],
				borderColor: [
					'#bababa',
				],
				borderWidth: 2,
				fill: false,
			}]
		},
		options: {
			responsive: true,
			title: { display: false },
			scales: {
				yAxes: [{
					scaleLabel: {
						display: true,
						labelString: 'Calories (kcal)'
					},
					ticks: {
						beginAtZero: true
					}
				}],
				xAxes: [{
					scaleLabel: {
						display: true,
						labelString: 'Dates'
					}
				}],
			},
			annotation: {
				annotations: [{
					id: 'ideal-calories-line',
					type: 'line',
					mode: 'horizontal',
					scaleID: 'y-axis-0',
					value: 1500,
					borderColor: green,
					borderWidth: 1,
					label: {
						enabled: true,
						content: 'Ideal Calorie Intake',
						backgroundColor: 'transparent',
						fontColor: green,
						yAdjust: 10
					}
				}, {
					id: 'average-calories-line',
					type: 'line',
					mode: 'horizontal',
					scaleID: 'y-axis-0',
					value: dailyAverageCalories,
					borderColor: red,
					borderWidth: 1,
					label: {
						enabled: true,
						content: 'Your Average Calorie Intake',
						backgroundColor: 'transparent',
						fontColor: red,
						yAdjust: 10
					}
				}]
			},
		},
		plugins: [{
			beforeDraw: function (c) {
				var data = c.data.datasets[0].data;
				for (let i in data) {
					let line = c.data.datasets[0]._meta['0'].data[i]._model;
					if (data[i] < c.annotation.elements['ideal-calories-line'].options.value) {
						line.backgroundColor = green;
						line.borderColor = green;
					} else {
						line.backgroundColor = red;
						line.borderColor = red;
					}
				}
			}
		}],
	});

	$('#selectCalorieFilter').change(function () {
			var sel = $(this).val();
			var foodHistoryData = myFoodHistoryChart.config.data.datasets[0].data;
			var idealCaloriesValue = 0, averageCaloriesValue = 0;
			var newData = [];

			switch (sel) {
				case 'Daily':
					newData = dailyData;
					idealCaloriesValue = 1500;
					averageCaloriesValue = {{{ dailyAverageCalories }}};
					break;
				case 'Breakfast':
					newData = breakfastData;
					idealCaloriesValue = 500;
					averageCaloriesValue = {{{ breakfastAverageCalories }}};
					break;
				case 'Lunch':
					newData = lunchData;
					idealCaloriesValue = 400;
					averageCaloriesValue = {{{ lunchAverageCalories }}};
					break;
				case 'Dinner':
					newData = dinnerData;
					idealCaloriesValue = 450;
					averageCaloriesValue = {{{ dinnerAverageCalories }}};
					break;
				case 'Snacks':
					newData = snacksData;
					idealCaloriesValue = 150;
					averageCaloriesValue = {{{ snacksAverageCalories }}};
					break;
				default:
					newData = dailyData;
					idealCaloriesValue = 1500;
					averageCaloriesValue = {{{ dailyAverageCalories }}};
					break;
			}

			foodHistoryData.length = 0;
			foodHistoryData.push.apply(
				foodHistoryData, newData
			);

			myFoodHistoryChart.annotation.elements['ideal-calories-line'].options.value = idealCaloriesValue;
			myFoodHistoryChart.annotation.elements['average-calories-line'].options.value = averageCaloriesValue;

			myFoodHistoryChart.update();
		});
</script>
{{/ifCond}}